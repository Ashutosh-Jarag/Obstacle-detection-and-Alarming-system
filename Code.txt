import RPi.GPIO as GPIO
import time

# Set GPIO mode to BCM
GPIO.setmode(GPIO.BCM)

# Set the GPIO pins
led_pin = 23 # LED pin
trigger_pin = 20  # HC-SR04 trigger pin
echo_pin = 21  # HC-SR04 echo pin
buzzer_pin = 24 # Buzzer pin

# Setup LED pin
GPIO.setup(led_pin, GPIO.OUT)

# Setup HC-SR04 pins
GPIO.setup(trigger_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)

# Setup Buzzer pin
GPIO.setup(buzzer_pin, GPIO.OUT)

# Initialize LED state and flag
led_state = False
hand_detected = False

def measure_distance():
    # Send a trigger pulse
    GPIO.output(trigger_pin, True)
    time.sleep(0.00001)
    GPIO.output(trigger_pin, False)

    start_time = time.time()
    stop_time = time.time()

    # Save StartTime
    while GPIO.input(echo_pin) == 0:
        start_time = time.time()

    # Save time of arrival
    while GPIO.input(echo_pin) == 1:
        stop_time = time.time()

    # Time difference between start and arrival
    time_elapsed = stop_time - start_time
    # Multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = (time_elapsed * 34300) / 2

    return distance

try:
    while True:
        distance = measure_distance()
        print("Distance:", distance, "cm")

        # Define the threshold distance
        threshold_distance = 20

        # Check if hand is detected within threshold distance
        if distance < threshold_distance:
            if not hand_detected:  # Hand was not detected previously
                hand_detected = True
                led_state = not led_state  # Toggle LED state
                if led_state:
                    GPIO.output(led_pin, GPIO.HIGH)  # Turn ON LED
                    GPIO.output(buzzer_pin, GPIO.HIGH) # Turn ON Buzzer
                    print("LED ON")
                    print("Buzzer ON")
                else:
                    GPIO.output(led_pin, GPIO.LOW)  # Turn OFF LED
                    GPIO.output(buzzer_pin, GPIO.LOW) # Turn OFF Buzzer
                    print("LED OFF")
                    print("Buzzer OFF")
        else:
            hand_detected = False  # Reset hand detection flag

        # Wait for a moment to prevent bouncing
        time.sleep(0.1)

except KeyboardInterrupt:
    print("Measurement stopped by User")
finally:
    GPIO.cleanup()